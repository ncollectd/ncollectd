plugin_option(PLUGIN_SWAP "Swap usage statistics" ON)

include(CheckLibraryExists)
include(CheckIncludeFiles)

set(BUILD_PLUGIN_SWAP 0)

if(PLUGIN_SWAP)
    if(BUILD_LINUX)
        set(BUILD_PLUGIN_SWAP 1)
    elseif(BUILD_FREEBSD)
        find_package(LibKvm)
        if(LIBKVM_FOUND)
            check_include_file(sys/dkstat.h HAVE_SYS_DKSTAT_H)
            check_library_exists(kvm kvm_getswapinfo "" HAVE_LIBKVM_GETSWAPINFO)
            if(HAVE_LIBKVM_GETSWAPINFO)
                set(BUILD_PLUGIN_SWAP 1)
            else()
                set(BUILD_PLUGIN_SWAP_REASON "kvm_getswapinfo not found" PARENT_SCOPE)
            endif()
        else()
            set(BUILD_PLUGIN_SWAP_REASON "kvm not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_DRAGONFLY)
        find_package(LibKvm)
        if(LIBKVM_FOUND)
            check_library_exists(kvm kvm_getswapinfo "" HAVE_LIBKVM_GETSWAPINFO)
            if(HAVE_LIBKVM_GETSWAPINFO)
                set(BUILD_PLUGIN_SWAP 1)
            else()
                set(BUILD_PLUGIN_SWAP_REASON "kvm_getswapinfo not found" PARENT_SCOPE)
            endif()
        else()
            set(BUILD_PLUGIN_SWAP_REASON "kvm not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_NETBSD)
       check_include_files("sys/types.h;sys/swap.h" HAVE_SYS_SWAP_H)
        check_function_exists(swapctl HAVE_SWAPCTL)
        if(HAVE_SWAPCTL)
            check_include_file(sys/dkstat.h HAVE_SYS_DKSTAT_H)
           set(HAVE_SWAPCTL_THREE_ARGS 1)
            set(BUILD_PLUGIN_SWAP 1)
        else()
            set(BUILD_PLUGIN_SWAP_REASON "swapctl not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_OPENBSD)
       check_include_files("sys/types.h;sys/swap.h" HAVE_SYS_SWAP_H)
        check_function_exists(swapctl HAVE_SWAPCTL)
        if(HAVE_SWAPCTL)
            check_include_file(sys/dkstat.h HAVE_SYS_DKSTAT_H)
           set(HAVE_SWAPCTL_THREE_ARGS 1)
            set(BUILD_PLUGIN_SWAP 1)
        else()
            set(BUILD_PLUGIN_SWAP_REASON "swapctl not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_AIX)
        find_package(LibPerfstat)
        if(LIBPERFSTAT_FOUND)
            set(BUILD_PLUGIN_SWAP 1)
        else()
            set(BUILD_PLUGIN_SWAP_REASON "perfstat not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_SOLARIS)
        find_package(LibKstat)
        if(LIBKSTAT_FOUND)
           check_include_files("sys/types.h;sys/swap.h" HAVE_SYS_SWAP_H)
            check_function_exists(swapctl HAVE_SWAPCTL)
            if(HAVE_SWAPCTL)
                set(HAVE_SWAPCTL_TWO_ARGS 1)
                set(BUILD_PLUGIN_SWAP 1)
            else()
                set(BUILD_PLUGIN_SWAP_REASON "swapctl not found" PARENT_SCOPE)
            endif()
        else()
            set(BUILD_PLUGIN_SWAP_REASON "kstat not found" PARENT_SCOPE)
        endif()
    elseif(BUILD_DARWIN)
        if(HAVE_SYSCTL)
            set(BUILD_PLUGIN_SWAP 1)
        else()
            set(BUILD_PLUGIN_SWAP_REASON "sysctl not found" PARENT_SCOPE)
        endif()
    else()
        set(BUILD_PLUGIN_SWAP_REASON "unsupported system" PARENT_SCOPE)
    endif()
endif()

set(BUILD_PLUGIN_SWAP ${BUILD_PLUGIN_SWAP} PARENT_SCOPE)

if(BUILD_PLUGIN_SWAP)
    set(PLUGIN_SWAP_SRC swap.c)
    set(PLUGIN_SWAP_LIBS libutils libmetric)

    if(BUILD_FREEBSD)
        list(APPEND PLUGIN_SWAP_LIBS LibKvm::LibKvm)
        list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_LIBKVM_GETSWAPINFO)
        if(HAVE_SYS_DKSTAT_H)
            list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SYS_DKSTAT_H)
        endif()
    elseif(BUILD_DRAGONFLY)
        list(APPEND PLUGIN_SWAP_LIBS LibKvm::LibKvm)
        list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_LIBKVM_GETSWAPINFO)
    elseif(BUILD_NETBSD)
        list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SWAPCTL)
       list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SWAPCTL_THREE_ARGS)
        if(HAVE_SYS_SWAP_H)
            list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SYS_SWAP_H)
        endif()
        if(HAVE_SYS_DKSTAT_H)
            list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SYS_DKSTAT_H)
        endif()
    elseif(BUILD_OPENBSD)
        list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SWAPCTL)
       list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SWAPCTL_THREE_ARGS)
        if(HAVE_SYS_SWAP_H)
            list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SYS_SWAP_H)
        endif()
        if(HAVE_SYS_DKSTAT_H)
            list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SYS_DKSTAT_H)
        endif()
    elseif(BUILD_AIX)
        list(APPEND PLUGIN_SWAP_LIBS LibPerfstat::LibPerfstat)
    elseif(BUILD_SOLARIS)
        list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SWAPCTL)
        list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SWAPCTL_TWO_ARGS)
        if(HAVE_SYS_SWAP_H)
            list(APPEND PLUGIN_SWAP_DEFINITIONS HAVE_SYS_SWAP_H)
        endif()
        list(APPEND PLUGIN_SWAP_LIBS LibKstat::LibKstat)
    endif()

    add_library(swap MODULE ${PLUGIN_SWAP_SRC})
    target_link_libraries(swap PRIVATE ${PLUGIN_SWAP_LIBS})
    target_compile_definitions(swap PUBLIC ${PLUGIN_SWAP_DEFINITIONS})
    set_target_properties(swap PROPERTIES PREFIX "")

    if(BUILD_LINUX)
        add_executable(test_plugin_swap EXCLUDE_FROM_ALL swap_linux_test.c ${PLUGIN_SWAP_SRC})
        target_link_libraries(test_plugin_swap libtest libutils libmetric m)
        add_dependencies(build_tests test_plugin_swap)
        add_test(NAME test_plugin_swap COMMAND test_plugin_swap WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
    endif()

    install(TARGETS swap DESTINATION ${CMAKE_INSTALL_LIBDIR}/ncollectd/)
    configure_file(ncollectd-swap.5 ncollectd-swap.5 @ONLY)
    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ncollectd-swap.5 DESTINATION ${CMAKE_INSTALL_MANDIR}/man5)
endif()
