.\" SPDX-License-Identifier: GPL-2.0-only
.Dd @NCOLLECTD_DATE@
.Dt NCOLLECTD-LUA 5
.Os ncollectd @NCOLLECTD_VERSION@
.Sh NAME
.Nm ncollectd-lua
.Nd Documentation of ncollectd's lua plugin
.Sh SYNOPSIS
.Bd -literal -compact
\fBload-plugin\fP lua
\fBplugin\fP lua {
    \fBbase-path\fP \fI/path/to/your/lua/scripts\fP
    \fBscript\fP \fIscript.lua\fP
}
.Ed
.Sh DESCRIPTION
The \fBlua\fP plugin embeds a Lua interpreter into collectd and provides an
interface to collectd's plugin system.
This makes it possible to write plugins for collectd in Lua.
.Pp
The minimum required Lua version is \fI5.1\fP.
.Bl -tag -width Ds
.It \fBbase-path\fP \fI/path/to/your/lua/scripts\fP
The directory the \fBlua\fP plugin looks in to find script \fBscript\fP.
If set, this is also prepended to \fBpackage.path\fP.
.It \fBscript\fP \fIscript.lua\fP
The script the \fBlua\fP plugin is going to run.
If \fBbase-path\fP is not specified, this needs to be an absolute path.
.El
.Sh WRITING YOUR OWN PLUGINS
Writing your own plugins is quite simple, ncollectd manages plugins by means of
\fBdispatch functions\fP which call the appropriate \fBcallback functions\fP
registered by the plugins.
Any plugin basically consists of the implementation of these callback functions
and initializing code which registers the functions with collectd.
See the section \fBEXAMPLES\fP below for a really basic example.
The following types of \fBcallback functions\fP are implemented in the
Lua plugin (all of them are optional):
.Bl -tag -width Ds
.It \fBread functions\fP
These are used to collect the actual data.
It is called once per interval (see the \fBinterval\fP configuration option
of collectd).
Usually it will call \fBncollectd.dispatch_metric_family\fP to dispatch
the metrics to ncollectd which will pass them on to all registered
\fBwrite functions\fP.
If this function does not return 0, interval between its calls will grow
until function returns 0 again.
See the \fBmax-read-interval\fP configuration option of ncollectd.
.It \fBwrite functions\fP
These are used to write the dispatched values.
They are called once for every value that was dispatched by any plugin.
.El
.Sh FUNCTIONS
The following functions are provided to Lua modules:
.Bl -tag -width Ds
.It \fBregister_read\fP(\fIcallback\fP)
Function to register read callbacks.
The callback will be called without arguments.
If this callback function does not return 0 the next call will be delayed by
an increasing interval.
.It \fBregister_write\fP(\fIcallback\fP)
Function to register write callbacks.
The callback function will be called with one argument passed, which will be a
table of values.
If this callback function does not return 0 next call will be delayed by
an increasing interval.
.It \fBlog_error, log_warning, log_notice, log_info, log_debug\fP(\fImessage\fP)
Log a message with the specified severity.
.El
.Sh EXAMPLES
A very simple read function might look like:
.Bd -literal
  function read()
    ncollectd.log_info("read function called")
    t = {
        host = 'localhost',
        plugin = 'myplugin',
        type = 'counter',
        values = {42},
    }
    ncollectd.dispatch_values(t)
    return 0
  end
.Ed
.Pp
A very simple write function might look like:
.Bd -literal
  function write(vl)
    for i = 1, #vl.values do
      ncollectd.log_info(vl.host .. '.' .. vl.plugin .. '.' .. vl.type .. ' ' .. vl.values[i])
    end
    return 0
  end
.Ed
.Pp
To register those functions with collectd:
.Bd -literal
  ncollectd.register_read(read)     -- pass function as variable
  ncollectd.register_write("write") -- pass by global-scope function name
.Ed
.Sh "SEE ALSO"
.Xr ncollectd 1 ,
.Xr ncollectd.conf 5
